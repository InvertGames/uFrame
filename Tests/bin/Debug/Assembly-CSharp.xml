<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:iTween">
            <summary>
            <para>Version: 2.0.46</para>	 
            <para>Author: Bob Berkebile (http://pixelplacement.com)</para>
            <para>Support: http://itween.pixelplacement.com</para>
            </summary>
        </member>
        <member name="M:iTween.Init(UnityEngine.GameObject)">
            <summary>
            Sets up a GameObject to avoid hiccups when an initial iTween is added. It's advisable to run this on every object you intend to run iTween on in its Start or Awake.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target to be initialized for iTween.
            </param>
        </member>
        <member name="M:iTween.CameraFadeFrom(System.Single,System.Single)">
            <summary>
            Instantly changes the amount(transparency) of a camera fade and then returns it back over time with MINIMUM customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.CameraFadeFrom(System.Collections.Hashtable)">
            <summary>
            Instantly changes the amount(transparency) of a camera fade and then returns it back over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.CameraFadeTo(System.Single,System.Single)">
            <summary>
            Changes the amount(transparency) of a camera fade over time with MINIMUM customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.CameraFadeTo(System.Collections.Hashtable)">
            <summary>
            Changes the amount(transparency) of a camera fade over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ValueTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Returns a value to an 'oncallback' method interpolated between the supplied 'from' and 'to' values for application as desired.  Requires an 'onupdate' callback that accepts the same type as the supplied 'from' and 'to' properties.
            </summary>
            <param name="from">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> or <see cref="T:UnityEngine.Vector3"/> or <see cref="T:UnityEngine.Vector2"/> or <see cref="T:UnityEngine.Color"/> or <see cref="T:UnityEngine.Rect"/> for the starting value.
            </param> 
            <param name="to">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> or <see cref="T:UnityEngine.Vector3"/> or <see cref="T:UnityEngine.Vector2"/> or <see cref="T:UnityEngine.Color"/> or <see cref="T:UnityEngine.Rect"/> for the ending value.
            </param> 
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed (only works with Vector2, Vector3, and Floats)
            </param>	
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.FadeFrom(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Changes a GameObject's alpha value instantly then returns it to the provided alpha over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorFrom and using the "a" parameter. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single"/> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.FadeFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's alpha value instantly then returns it to the provided alpha over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorFrom and using the "a" parameter.
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the initial alpha value of the animation.
            </param>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the initial alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.FadeTo(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Changes a GameObject's alpha value over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorTo and using the "a" parameter.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single"/> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.FadeTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's alpha value over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorTo and using the "a" parameter.
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the final alpha value of the animation.
            </param>
            <param name="amount">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the final alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ColorFrom(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Changes a GameObject's color values instantly then returns them to the provided properties over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ColorFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's color values instantly then returns them to the provided properties over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation.
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the alpha.
            </param> 
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue"/> or <see cref="T:System.String"/> for the individual setting of the alpha.
            </param> 
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ColorTo(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Changes a GameObject's color values over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, they will become the target of the animation.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ColorTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's color values over time with FULL customization options.  If a GUIText or GUITexture component is attached, they will become the target of the animation.
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the alpha.
            </param> 
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue"/> or <see cref="T:System.String"/> for the individual setting of the alpha.
            </param> 
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.AudioFrom(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Instantly changes an AudioSource's volume and pitch then returns it to it's starting volume and pitch over time with MINIMUM customization options. Default AudioSource attached to GameObject will be used (if one exists) if not supplied.
            </summary>
            <param name="target"> 
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation which holds the AudioSource to be changed.
            </param>
            <param name="volume"> for the target level of volume.
            A <see cref="T:System.Single"/>
            </param>
            <param name="pitch"> for the target pitch.
            A <see cref="T:System.Single"/>
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.AudioFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes an AudioSource's volume and pitch then returns it to it's starting volume and pitch over time with FULL customization options. Default AudioSource attached to GameObject will be used (if one exists) if not supplied. 
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use.
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.AudioTo(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Fades volume and pitch of an AudioSource with MINIMUM customization options.  Default AudioSource attached to GameObject will be used (if one exists) if not supplied. 
            </summary>
            <param name="target"> 
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation which holds the AudioSource to be changed.
            </param>
            <param name="volume"> for the target level of volume.
            A <see cref="T:System.Single"/>
            </param>
            <param name="pitch"> for the target pitch.
            A <see cref="T:System.Single"/>
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.AudioTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Fades volume and pitch of an AudioSource with FULL customization options.  Default AudioSource attached to GameObject will be used (if one exists) if not supplied. 
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use.
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.Stab(UnityEngine.GameObject,UnityEngine.AudioClip,System.Single)">
            <summary>
            Plays an AudioClip once based on supplied volume and pitch and following any delay with MINIMUM customization options. AudioSource is optional as iTween will provide one.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation which holds the AudioSource to be utilized.
            </param>
            <param name="audioclip">
            A <see cref="T:UnityEngine.AudioClip"/> for a reference to the AudioClip to be played.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> for the time in seconds the action will wait before beginning.
            </param>
        </member>
        <member name="M:iTween.Stab(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Plays an AudioClip once based on supplied volume and pitch and following any delay with FULL customization options. AudioSource is optional as iTween will provide one.
            </summary>
            <param name="audioclip">
            A <see cref="T:UnityEngine.AudioClip"/> for a reference to the AudioClip to be played.
            </param> 
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the action will wait before beginning.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.LookFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly rotates a GameObject to look at the supplied Vector3 then returns it to it's starting rotation over time with MINIMUM customization options. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> to be the Vector3 that the target will look towards.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.LookFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly rotates a GameObject to look at a supplied Transform or Vector3 then returns it to it's starting rotation over time with FULL customization options. 
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.LookTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotates a GameObject to look at the supplied Vector3 over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> to be the Vector3 that the target will look towards.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.LookTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Rotates a GameObject to look at a supplied Transform or Vector3 over time with FULL customization options.
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.MoveTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes a GameObject's position over time to a supplied destination with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3"/> for the destination Vector3.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's position over time to a supplied destination with FULL customization options.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/> or <see cref="!:Vector3[]"/> for a list of points to draw a Catmull-Rom through for a curved animation path.
            </param>
            <param name="movetopath">
            A <see cref="T:System.Boolean"/> for whether to automatically generate a curve from the GameObject's current position to the beginning of the path. True by default.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="lookahead">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how much of a percentage to look ahead on a path to influence how strict "orientopath" is.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.MoveFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's position to a supplied destination then returns it to it's starting position over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3"/> for the destination Vector3.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's position to a supplied destination then returns it to it's starting position over time with FULL customization options.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/> or <see cref="!:Vector3[]"/> for a list of points to draw a Catmull-Rom through for a curved animation path.
            </param>
            <param name="movetopath">
            A <see cref="T:System.Boolean"/> for whether to automatically generate a curve from the GameObject's current position to the beginning of the path. True by default.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="lookahead">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for how much of a percentage to look ahead on a path to influence how strict "orientopath" is.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.MoveAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates a GameObject's position over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Translates a GameObject's position over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.MoveBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds the supplied coordinates to a GameObject's postion with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds the supplied coordinates to a GameObject's position with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of change in position to move the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ScaleTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes a GameObject's scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ScaleFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's scale then returns it to it's starting scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's scale then returns it to it's starting scale over time with FULL customization options.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ScaleAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds to a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of scale to be added to the GameObject's current scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds to a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be added to the GameObject's current scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ScaleBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Multiplies a GameObject's scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of scale to be multiplied by the GameObject's current scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Multiplies a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be multiplied to the GameObject's current scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.RotateTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotates a GameObject to the supplied Euler angles in degrees over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Rotates a GameObject to the supplied Euler angles in degrees over time with FULL customization options.
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.RotateFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's Euler angles in degrees then returns it to it's starting rotation over time (if allowed) with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate from.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's Euler angles in degrees then returns it to it's starting rotation over time (if allowed) with FULL customization options.
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.RotateAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds supplied Euler angles in degrees to a GameObject's rotation over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of Euler angles in degrees to add to the current rotation of the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds supplied Euler angles in degrees to a GameObject's rotation over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount of Euler angles in degrees to add to the current rotation of the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.RotateBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Multiplies supplied values by 360 and rotates a GameObject by calculated amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be multiplied by 360 to rotate the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Multiplies supplied values by 360 and rotates a GameObject by calculated amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the amount to be multiplied by 360 to rotate the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> or <see cref="T:System.String"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTween.EaseType"/> or <see cref="T:System.String"/> for the shape of the easing curve applied to the animation.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ShakePosition(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's position by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ShakePosition(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's position by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>  
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ShakeScale(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's scale by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ShakeScale(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's scale by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.ShakeRotation(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ShakeRotation(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.PunchPosition(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's position and wobbles it back to its initial position with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.PunchPosition(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's position and wobbles it back to its initial position with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget".
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param>   
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.PunchRotation(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.PunchRotation(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space"/> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param> 
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param> 
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTween.PunchScale(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.PunchScale(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3"/> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z magnitude.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will wait before beginning.
            </param> 
            <param name="looptype">
            A <see cref="T:iTween.LoopType"/> or <see cref="T:System.String"/> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String"/> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate"> 
            A <see cref="T:System.String"/> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "onupdate" method.
            </param> 
            <param name="oncomplete">
            A <see cref="T:System.String"/> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object"/> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTween.RectUpdate(UnityEngine.Rect,UnityEngine.Rect,System.Single)" -->
        <member name="M:iTween.Vector3Update(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns a Vector3 that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Vector3"/>
            </returns>
            <param name="currentValue">
            A <see cref="T:UnityEngine.Vector3"/> the starting or initial value
            </param>
            <param name="targetValue">
            A <see cref="T:UnityEngine.Vector3"/> the target value that the current value will be eased to.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:iTween.Vector2Update(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a Vector2 that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Vector2"/>
            </returns>
            <param name="currentValue">
            A <see cref="T:UnityEngine.Vector2"/> the starting or initial value
            </param>
            <param name="targetValue">
            A <see cref="T:UnityEngine.Vector2"/> the target value that the current value will be eased to.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:iTween.FloatUpdate(System.Single,System.Single,System.Single)">
            <summary>
            Returns a float that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:System.Single"/>
            </returns>
            <param name="currentValue">
            A <see cref="T:System.Single"/> the starting or initial value
            </param>
            <param name="targetValue">
            A <see cref="T:System.Single"/> the target value that the current value will be eased to.
            </param>
            <param name="speed">
            A <see cref="T:System.Single"/> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:iTween.FadeUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to FadeTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the final alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.FadeUpdate(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Similar to FadeTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single"/> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ColorUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to ColorTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the alpha.
            </param> 
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue"/> or <see cref="T:System.String"/> for the individual setting of the alpha.
            </param> 
            <param name="includechildren">
            A <see cref="T:System.Boolean"/> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ColorUpdate(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Similar to ColorTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.AudioUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to AudioTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource"/> for which AudioSource to use.
            </param> 
            <param name="volume">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.AudioUpdate(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Similar to AudioTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="volume">
            A <see cref="T:System.Single"/> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single"/> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.RotateUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to RotateTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
        </member>
        <member name="M:iTween.RotateUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to RotateTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3"/> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.ScaleUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to ScaleTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options.  Does not utilize an EaseType. 
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
        </member>
        <member name="M:iTween.ScaleUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to ScaleTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options.  Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3"/> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.MoveUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to MoveTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
            <param name="islocal">
            A <see cref="T:System.Boolean"/> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean"/> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> or A <see cref="T:UnityEngine.Transform"/> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
        </member>
        <member name="M:iTween.MoveUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to MoveTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3"/> for a point in space the GameObject will animate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.LookUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to LookTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform"/> or <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String"/>. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> or <see cref="T:System.Double"/> for the time in seconds the animation will take to complete.
            </param> 
        </member>
        <member name="M:iTween.LookUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to LookTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType. 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3"/> for a target the GameObject will look at.
            </param>
            <param name="time">
            A <see cref="T:System.Single"/> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTween.PathLength(UnityEngine.Transform[])">
            <summary>
            Returns the length of a curved path drawn through the provided array of Transforms.
            </summary>
            <returns>
            A <see cref="T:System.Single"/>
            </returns>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.PathLength(UnityEngine.Vector3[])">
            <summary>
            Returns the length of a curved path drawn through the provided array of Vector3s.
            </summary>
            <returns>
            The length.
            </returns>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
        </member>
        <member name="M:iTween.CameraTexture(UnityEngine.Color)">
            <summary>
            Creates and returns a full-screen Texture2D for use with CameraFade.
            </summary>
            <returns>
            Texture2D
            </returns>
            <param name='color'>
            Color
            </param>
        </member>
        <member name="M:iTween.PutOnPath(UnityEngine.GameObject,UnityEngine.Vector3[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/>
            </param>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:iTween.PutOnPath(UnityEngine.Transform,UnityEngine.Vector3[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.Transform"/>
            </param>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:iTween.PutOnPath(UnityEngine.GameObject,UnityEngine.Transform[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject"/>
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:iTween.PutOnPath(UnityEngine.Transform,UnityEngine.Transform[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage 
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.Transform"/>
            </param>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
        </member>
        <member name="M:iTween.PointOnPath(UnityEngine.Transform[],System.Single)">
            <summary>
            Returns a Vector3 position on a path at the provided percentage  
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:iTween.DrawLine(UnityEngine.Vector3[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Vector3s.
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLine(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Vector3s.
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLine(UnityEngine.Transform[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Transforms.
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLine(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Transforms.
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLineGizmos(UnityEngine.Vector3[])">
            <summary>
            Draws a line through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLineGizmos(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLineGizmos(UnityEngine.Transform[])">
            <summary>
            Draws a line through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLineGizmos(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLineHandles(UnityEngine.Vector3[])">
            <summary>
            Draws a line through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLineHandles(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawLineHandles(UnityEngine.Transform[])">
            <summary>
            Draws a line through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawLineHandles(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.PointOnPath(UnityEngine.Vector3[],System.Single)">
            <summary>
            Returns a Vector3 position on a path at the provided percentage  
            </summary>
            <param name="path">
            A <see cref="!:Vector3[]"/>
            </param>
            <param name="percent">
            A <see cref="T:System.Single"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.Vector3"/>
            </returns>
        </member>
        <member name="M:iTween.DrawPath(UnityEngine.Vector3[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Vector3s.
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPath(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Vector3s.
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPath(UnityEngine.Transform[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Transforms.
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPath(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Transforms.
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPathGizmos(UnityEngine.Vector3[])">
            <summary>
            Draws a curved path through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPathGizmos(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPathGizmos(UnityEngine.Transform[])">
            <summary>
            Draws a curved path through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPathGizmos(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPathHandles(UnityEngine.Vector3[])">
            <summary>
            Draws a curved path through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPathHandles(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.DrawPathHandles(UnityEngine.Transform[])">
            <summary>
            Draws a curved path through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
        </member>
        <member name="M:iTween.DrawPathHandles(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Transform[]"/>
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color"/>
            </param> 
        </member>
        <member name="M:iTween.CameraFadeDepth(System.Int32)">
            <summary>
            Changes a camera fade's texture.
            </summary>
            <param name="depth">
            A <see cref="T:System.Int32"/>
            </param>
        </member>
        <member name="M:iTween.CameraFadeDestroy">
            <summary>
            Removes and destroyes a camera fade.
            </summary>
        </member>
        <member name="M:iTween.CameraFadeSwap(UnityEngine.Texture2D)">
            <summary>
            Changes a camera fade's texture.
            </summary>
            <param name="texture">
            A <see cref="T:UnityEngine.Texture2D"/>
            </param>
        </member>
        <member name="M:iTween.CameraFadeAdd(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Creates a GameObject (if it doesn't exist) at the supplied depth that can be used to simulate a camera fade.
            </summary>
            <param name="texture">
            A <see cref="T:UnityEngine.Texture2D"/>
            </param>
            <param name="depth">
            A <see cref="T:System.Int32"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the CameraFade.
            </returns>
        </member>
        <member name="M:iTween.CameraFadeAdd(UnityEngine.Texture2D)">
            <summary>
            Creates a GameObject (if it doesn't exist) at the default depth that can be used to simulate a camera fade.
            </summary>
            <param name="texture">
            A <see cref="T:UnityEngine.Texture2D"/>
            </param>
            <returns>
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the CameraFade.
            </returns>
        </member>
        <member name="M:iTween.CameraFadeAdd">
            <summary>
            Creates a GameObject (if it doesn't exist) at the default depth filled with black that can be used to simulate a camera fade.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.GameObject"/> for a reference to the CameraFade.
            </returns>
        </member>
        <member name="M:iTween.Resume(UnityEngine.GameObject)">
            <summary>
            Resume all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTween.Resume(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Resume all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTween.Resume(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.Resume(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <member name="M:iTween.Resume">
            <summary>
            Resume all iTweens in scene.
            </summary>
        </member>
        <member name="M:iTween.Resume(System.String)">
            <summary>
            Resume all iTweens in scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to resume.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:iTween.Pause(UnityEngine.GameObject)">
            <summary>
            Pause all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTween.Pause(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Pause all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTween.Pause(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.Pause(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <member name="M:iTween.Pause">
            <summary>
            Pause all iTweens in scene.
            </summary>
        </member>
        <member name="M:iTween.Pause(System.String)">
            <summary>
            Pause all iTweens in scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to pause.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:iTween.Count">
            <summary>
            Count all iTweens in current scene.
            </summary>
        </member>
        <member name="M:iTween.Count(System.String)">
            <summary>
            Count all iTweens in current scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to stop.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:iTween.Count(UnityEngine.GameObject)">
            <summary>
            Count all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTween.Count(UnityEngine.GameObject,System.String)">
            <summary>
            Count all iTweens on a GameObject of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to count.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param>  
        </member>
        <member name="M:iTween.Stop">
            <summary>
            Stop and destroy all Tweens in current scene.
            </summary>
        </member>
        <member name="M:iTween.Stop(System.String)">
            <summary>
            Stop and destroy all iTweens in current scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String"/> name of the type of iTween you would like to stop.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param> 
        </member>
        <member name="M:iTween.StopByName(System.String)">
            <summary>
            Stop and destroy all iTweens in current scene of a particular name.
            </summary>
            <param name="name">
            The <see cref="T:System.String"/> name of iTween you would like to stop.
            </param> 
        </member>
        <member name="M:iTween.Stop(UnityEngine.GameObject)">
            <summary>
            Stop and destroy all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTween.Stop(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Stop and destroy all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:iTween.Stop(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.StopByName(UnityEngine.GameObject,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.Stop(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:iTween.StopByName(UnityEngine.GameObject,System.String,System.Boolean)" -->
        <member name="M:iTween.Hash(System.Object[])">
            <summary>
            Universal interface to help in the creation of Hashtables.  Especially useful for C# users.
            </summary>
            <param name="args">
            A <see cref="!:System.Object[]"/> of alternating name value pairs.  For example "time",1,"delay",2...
            </param>
            <returns>
            A <see cref="T:System.Collections.Hashtable"/>
            </returns>
        </member>
        <member name="T:iTween.EaseType">
            <summary>
            The type of easing to use based on Robert Penner's open source easing equations (http://www.robertpenner.com/easing_terms_of_use.html).
            </summary>
        </member>
        <member name="T:iTween.LoopType">
            <summary>
            The type of loop (if any) to use.  
            </summary>
        </member>
        <member name="F:iTween.LoopType.none">
            <summary>
            Do not loop.
            </summary>
        </member>
        <member name="F:iTween.LoopType.loop">
            <summary>
            Rewind and replay.
            </summary>
        </member>
        <member name="F:iTween.LoopType.pingPong">
            <summary>
            Ping pong the animation back and forth.
            </summary>
        </member>
        <member name="T:iTween.NamedValueColor">
            <summary>
            Many shaders use more than one color. Use can have iTween's Color methods operate on them by name.   
            </summary>
        </member>
        <member name="F:iTween.NamedValueColor._Color">
            <summary>
            The main color of a material. Used by default and not required for Color methods to work in iTween.
            </summary>
        </member>
        <member name="F:iTween.NamedValueColor._SpecColor">
            <summary>
            The specular color of a material (used in specular/glossy/vertexlit shaders).
            </summary>
        </member>
        <member name="F:iTween.NamedValueColor._Emission">
            <summary>
            The emissive color of a material (used in vertexlit shaders).
            </summary>
        </member>
        <member name="F:iTween.NamedValueColor._ReflectColor">
            <summary>
            The reflection color of the material (used in reflective shaders).
            </summary>
        </member>
        <member name="T:iTween.Defaults">
            <summary>
            A collection of baseline presets that iTween needs and utilizes if certain parameters are not provided. 
            </summary>
        </member>
        <member name="M:MyBehaviour._CompareTag_OnFalse">
            _CompareTag_OnFalse
        </member>
        <member name="M:MyBehaviour._CompareTag_OnTrue">
            _CompareTag_OnTrue
        </member>
        <member name="M:MyBehaviour._GetKeyDownByKey_OnTrue">
            _GetKeyDownByKey_OnTrue
        </member>
        <member name="M:MyBehaviour._LogProperty">
            _LogProperty
        </member>
        <member name="M:MyBehaviour._StateProperty">
            _StateProperty
        </member>
        <member name="M:MyBehaviour.CustomTemplate">
            Custom Template
        </member>
        <member name="M:MyBehaviour.MouseDownTrigger">
             Mouse Down Trigger
        </member>
        <member name="M:MyBehaviour.OnAnimatorIKTrigger">
             On Animator IK Trigger
        </member>
        <member name="M:MyBehaviour.UpdateTrigger">
             Update Trigger
        </member>
        <member name="T:Controller">
            <summary>
            A controller is a integral part of uFrame and is used for an extra layer connecting services and "Elements" of a
            game together.
            </summary>
        </member>
        <member name="T:IViewModelObserver">
            <summary>
            Potential future use.
            </summary>
        </member>
        <member name="P:ViewModelObserver.Bindings">
            <summary>
            The bindings that are attached to this ViewModel
            </summary>
        </member>
        <member name="M:Controller.GameEvent(System.String,System.Object[])">
            <summary>
            Send an event to our game
            </summary>
            <param name="message"></param>
            <param name="additionalParamters"></param>
        </member>
        <member name="M:Controller.Event(ViewModel,System.String,System.Object[])">
            <summary>
            \brief Send an event to a game.
            Additional parameters shouldn't pass the view to the controller unless absolutely necessary.
            A warning will be issued if you try to pass a view to the controller
            </summary>
            <param name="model">The model at which the controller will accept automatically as its first parameter.</param>
            <param name="message">The event/method that will be sent to the controller.</param>
            <param name="additionalParameters">Any additional information to pass along with the event.</param>
        </member>
        <member name="P:Controller.ControllerName">
            <summary>
            The friendly name of the controller.
            If this' type name ends with controller it will be removed.
            </summary>
        </member>
        <member name="T:View`1">
            <summary>
            A View is a visual representation of a ViewModel. For example: A UI dialog, Player, Weapon, etc...
            <typeparam name="TModel">The ViewModel Type</typeparam>
            </summary>
        </member>
        <member name="T:ViewBase">
            <summary>
            The base class for a View that binds to a ViewModel
            </summary>
        </member>
        <member name="T:ViewContainer">
            <summary>
            A base class for all view containers.
            Simply just utility methods for views and events.
            </summary>
        </member>
        <member name="M:ViewContainer.InstantiateView(System.String,ViewModel)">
            <summary>
            Instantiates a view.
            </summary>
            <param name="viewName">The name of the prefab/view to instantiate</param>
            <param name="model">The model that will be passed to the view.</param>
            <returns>The instantiated view</returns>
        </member>
        <member name="M:ViewContainer.InstantiateView(System.String,UnityEngine.Vector3)">
            <param name="position">The position to instantiate the view.</param>
            <returns>The instantiated view</returns>
        </member>
        <member name="M:ViewContainer.InstantiateView(System.String,ViewModel,UnityEngine.Vector3)">
            <summary>
            Instantiates a view.
            </summary>
            <param name="viewName">The name of the prefab/view to instantiate</param>
            <param name="model">The model that will be passed to the view.</param>
            <param name="position">The position to instantiate the view.</param>
            <returns>The instantiated view</returns>
        </member>
        <member name="M:ViewContainer.InstantiateView(System.String,ViewModel,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates a view.
            </summary>
            <param name="viewName">The name of the prefab/view to instantiate</param>
            <param name="model">The model that will be passed to the view.</param>
            <param name="position">The position to instantiate the view.</param>
            <param name="rotation">The rotation to instantiate the view with.</param>
            <returns>The instantiated view</returns>
        </member>
        <member name="M:ViewContainer.InstantiateView(UnityEngine.GameObject,ViewModel,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiates a view.
            </summary>
            <param name="prefab">The prefab/view to instantiate</param>
            <param name="model">The model that will be passed to the view.</param>
            <param name="position">The position to instantiate the view.</param>
            <param name="rotation">The rotation to instantiate the view with.</param>
            <returns>The instantiated view</returns>
        </member>
        <member name="F:ViewBase._LogEvents">
            <summary>
            Should we log an event for each View event that occurs.
            </summary>
        </member>
        <member name="F:ViewBase._ViewModelFrom">
            <summary>
            Where should the viewmodel come from or how should it be instantiated.
            </summary>
        </member>
        <member name="M:ViewBase.SetupBindings">
            <summary>
            This method will setup all bindings on this view.  Bindings don't actually occur on a view until this method is called.
            In the bind method it will simply add to the collection of bindings.  You should never have to call this method manually.
            </summary>
        </member>
        <member name="M:ViewBase.Unbind">
            <summary>
            Unbind the current bindings.
            </summary>
        </member>
        <member name="M:ViewBase.Event(System.String)">
            <summary>
            Invoke a .NET event on this view.  This is a convinience method for Event Bindings.
            </summary>
            <param name="eventname">The name of the event that occured</param>
        </member>
        <member name="M:ViewBase.InitializeViewModel(ViewModel)">
            <summary>
            This method should be overriden to Initialize the ViewModel
            with any options specified in a unity component inspector.
            </summary>
            <param name="model">The model to initialize.</param>
        </member>
        <member name="E:ViewBase.EventTriggered">
            <summary>
            An event that is invoked whe calling Event("MyEvent")
            </summary>
        </member>
        <member name="P:ViewBase.ViewName">
            <summary>
            The name of the prefab that created this view
            </summary>
        </member>
        <member name="T:ViewBase.ViewEvent">
            <summary>
            The View Event delegate that takes a string for the event name.
            </summary>
            <param name="eventName">The event that has occured.</param>
        </member>
        <member name="M:View`1.InitializeViewModel(`0)">
            <summary>
            The method InitializeViewModel should be overriden to initialize anything from the Inspector Editor.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="P:View`1.Model">
            <summary>
            Gets or sets the ViewModel. Note: The setter will reinvoke the bind method.  To set quietly use ViewModelObject
            </summary>
        </member>
        <member name="T:ViewModel">
            <summary>
             A data structure that contains information/data needed for a 'View'
            </summary>
        </member>
        <member name="M:ViewModel.GetReflectedCommands(System.Type)">
             <summary>
            
             </summary>
             <param name="modelType"></param>
             <returns></returns>
        </member>
        <member name="M:ViewModel.GetProperties">
            <summary>
            Override this method to skip using reflection.  This can drastically improve performance especially IOS
            </summary>
            <returns></returns>
        </member>
        <member name="P:ViewModel.Item(System.String)">
             <summary>
            Access a model property via string.  This is optimized using a compiled delegate to
            access derived classes properties so use as needed
             </summary>
             <param name="bindingPropertyName">The name of the property/field to access</param>
             <returns>ModelPropertyBase The Model Property class.  Use value to get the value of the property</returns>
        </member>
        <member name="M:SharpUnit.TestCase.Run(SharpUnit.TestResult)">
            Perform any setup before the test is run.
        </member>
        <member name="M:SharpUnit.TestCase.TearDown">
            Perform any clean up after the test has run.
        </member>
        <member name="M:SharpUnit.Assert.Equal(System.Int32,System.Int32)">
             Set the exception that is expected to be triggered by a unit test case.
            
             @param ex, the expection to expect.
        </member>
        <member name="M:SharpUnit.Assert.False(System.Boolean)">
             Throw an exception if the boolean expression is not true.
            
             @param boolean, the expression to test.
        </member>
        <member name="M:SharpUnit.Assert.True(System.Boolean,System.String)">
             Throw an exception if the boolean expression is not true.
            
             @param boolean, boolean expression to evaluate.
             @param msg, error message to display if test fails.
        </member>
        <member name="P:SharpUnit.Assert.Exception">
            Property to get/set the exception we are expecting.
        </member>
        <member name="M:SharpUnit.TestException.#ctor(System.String)">
             Constructor
            
             @param msg, error message to display.
        </member>
        <member name="P:SharpUnit.TestException.Description">
            Get / set the Description property.
        </member>
        <member name="P:SharpUnit.TestException.StackFrame">
            Get the stack frame property
        </member>
        <member name="M:SharpUnit.TestReporter.LogFailure(System.Exception)">
             Outputs the results of the unit tests.
            
             @param result, the result containing the failures to display.
        </member>
        <member name="M:SharpUnit.TestReporter.LogSummary">
            Virtual method to output the summary of the executed unit tests.
            NOTE: Can be overriden to customize how errors are reported.
                  Especially useful for displaying failed tests within the
                  Unity3D console, etc.
        </member>
        <member name="P:SharpUnit.TestReporter.Result">
            Get the TestResult object that will be used for reporting.
        </member>
        <member name="M:SharpUnit.TestResult.Finalize">
            Destructor
        </member>
        <member name="M:SharpUnit.TestResult.GetSummary">
            Get the list of failed test exceptions.
            Get the number of tests run.
            Incremented by calling TestStarted()
            Get the number of failed tests.
            Incremented by calling TestFailed()
            Increment the number of tests run.
        </member>
        <member name="P:SharpUnit.TestResult.ErrorList">
            Constructor
        </member>
        <member name="M:SharpUnit.TestSuite.#ctor">
            Constructor
        </member>
        <member name="M:SharpUnit.TestSuite.Finalize">
            Destructor
        </member>
        <member name="M:SharpUnit.TestSuite.AddAll``1">
             Add all test cases to the test suite.
            
             @param test, the test case containing the tests we will add.
        </member>
        <member name="M:SharpUnit.TestSuite.Run(SharpUnit.TestResult)">
             Run all of the tests in the test suite.
            
             @param result, result of the test run.
        </member>
        <member name="T:GameType">
            <summary>
            The main entry point for a game that is managed and accessible via GameManager. Only one will
            available at a time.  This class when derived form should setup the container and load anything needed to properly
            run a game.  This could include ViewModel Registering in the Container, Instantiating Views, Instantiating or Initializing Controllers.
            </summary>
        </member>
        <member name="M:GameType.CreateController``1">
            <summary>
            Creates a controller ( A GameObject with the controller of type T attached to it).
            </summary>
            <returns>The controller.</returns>
            <typeparam name="T">The controller type.</typeparam>
        </member>
        <member name="M:GameType.CreateController(System.Type)">
            <summary>
            Creates a controller ( A GameObject with the controller of type T attached to it).
            </summary>
            <returns>The controller.</returns>
        </member>
        <member name="M:GameType.Load(UpdateProgressDelegate)">
            <summary>
            This method should do any set up necessary to load the controller and is invoked when you call
            GameStateManager.SwitchGame().  This should call StartCoroutine(Controller.Load) on any
            regular controller in the scene.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameType.OnLoaded">
            <summary>
            This method is called when this controller has started loading
            </summary>
        </member>
        <member name="M:GameType.OnLoading">
            <summary>
            This method is called when the load function has completed
            </summary>
        </member>
        <member name="M:GameType.RegisterController(Controller,System.Boolean)">
            <summary>
            Registers a controller based off of its type
            </summary>
            <param name="controller">The controller to be registered with this game.</param>
            <param name="removeExisting">Should we remove the existing controller if one of the exact same type exists</param>
        </member>
        <member name="M:GameType.Reload">
            <summary>
            This method simply starts the load method as a coroutine and should be overriden
            to add any reload logic that is necessary
            </summary>
        </member>
        <member name="M:GameType.UnregisterController(Controller)">
            <summary>
            Unregisters the controller.
            </summary>
            <param name="controller">Controller.</param>
        </member>
        <member name="M:GameType.UnregisterController(System.String)">
            <summary>
            Unregisters the controller.
            </summary>
            <param name="controllerName">Controller name.</param>
        </member>
        <member name="P:GameType.Item(System.String)">
            <summary>
            Gets the <see cref="T:GameType"/> with the specified controllerName.
            </summary>
            <param name="controllerName">Controller name.</param>
        </member>
        <member name="P:GameType.Controllers">
            <summary>
            Gets the controllers that have been registered with this game.
            </summary>
            <value>The controllers.</value>
        </member>
        <member name="M:Unity3D_TestReporter.LogFailure(System.Exception)">
            Log unit test summary to the console.
        </member>
        <member name="M:Unity3D_TestRunner.RunTests(SharpUnit.TestSuite)">
            Initialize class resources.
        </member>
        <member name="M:Movement.MoveOverTime(UnityEngine.Transform,System.Single,UnityEngine.Vector3)">
            <summary>
            Moves a transform in a direction at the specified speed.
            </summary>
            <param name="transform">The tranform to move</param>
            <param name="speed">The speed to move the transform</param>
            <param name="direction">The direction to move the transform in.</param>
        </member>
        <member name="M:uFrameExampleGameType.Setup">
            <summary>
            Register anything with the dependency container via
            Container.Register or Container.RegisterInstance
            </summary>
        </member>
        <member name="M:uFrameExampleGameType.Load(UpdateProgressDelegate)">
            <summary>
            A coroutine to load the game.
            This is a good place to instantiate any root view that arn't in the scene
            as well as perform a login, network connection or anything that may require
            the game to load slowly.
            </summary>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:uFrameExampleGameType.Reload">
            <summary>
            Any logic needed to reload this game.  
            Usually only needed for physics resets
            </summary>
        </member>
        <member name="M:uFrameExampleGameType.OnLoaded">
            <summary>
            After this game has been loaded.  This is a good place to let any controller 
            know that the game has started.
            </summary>
        </member>
        <member name="T:UBehaviours">
            <summary>
            Represents a UBehaviour Data file that can be included into UBInstances.
            </summary>
        </member>
        <member name="M:UBehavioursInstance.FindDeclare(System.String)">
            <summary>
            Searches declares and static variables for the variable.
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:CheckerBoardViewModel.IsOnCheckerBoard(Position)">
            <summary>
            Conveniance method for determining wether or not a position is valid.
            </summary>
            <param name="pos">The position to check for</param>
            <returns>True if it's on the checker board</returns>
        </member>
        <member name="P:CheckerBoardViewModel.Checkers">
            <summary>
            The current checkers on this board
            </summary>
        </member>
        <member name="P:CheckerBoardViewModel.Plates">
            <summary>
            The plates/positions that make up the checkerboard
            </summary>
        </member>
        <member name="P:CheckerPlateViewModel.CanMoveTo">
            <summary>
            Gets or sets a value indicating whether this instance can be moved to.
            This should be bound to highlight when true
            </summary>
            <value><c>true</c> if this instance can move to; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CheckerPlateViewModel.ClickCommand">
            <summary>
            Gets the click command.
            </summary>
            <value>The click command.</value>
        </member>
        <member name="P:CheckerPlateViewModel.IsEven">
            <summary>
            Gets or sets a value indicating whether this instance is even.
            </summary>
            <value><c>true</c> if this instance is even; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CheckersGameController.MakeMove(Position)">
            <summary>
            Make a checker move
            </summary>
            <param name="desiredPosition">The desired position for the checker to move to.</param>
        </member>
        <member name="F:CheckersGameType._CheckersGameController">
            <summary>
            The main checkers controller
            </summary>
        </member>
        <member name="T:MouseLook">
            - Create a camera. Make the camera a child of the capsule. Reset it's transform.
            - Add a MouseLook script to the camera.
              -> Set the mouse look to use LookY. (You want the camera to tilt up and down like a head. The character already turns.)
        </member>
        <member name="F:FallingGameController._SpeedMultiplier">
            <summary>
            How much should it speed up each box that is dropped
            </summary>
        </member>
        <member name="F:FallingGameController._StartSpeed">
            <summary>
            How fast should it start
            </summary>
        </member>
        <member name="M:FallingGameController.CheckForGameOver">
            <summary>
            If the game is over we return true. Otherwise false
            </summary>
            <returns></returns>
        </member>
        <member name="M:FallingGameController.Create">
            <summary>
            Create the game view model setting up any defaults and wiring up some commands.
            </summary>
            <returns>The ViewModel for the falling game.</returns>
        </member>
        <member name="M:FallingGameController.GameOver">
            <summary>
            The game has ended
            </summary>
        </member>
        <member name="M:FallingGameController.HitGround(Tutorial2BoxViewModel)">
            <summary>
             When a box hits the ground.
            </summary>
            <param name="box">The box that hit the ground.</param>
        </member>
        <member name="M:FallingGameController.HitPlayer(Tutorial2BoxViewModel)">
            <summary>
            When a box hits a player
            </summary>
            <param name="box">The box that hit the player</param>
        </member>
        <member name="M:FallingGameController.Setup(IGameContainer)">
            <summary>
            Grab any ViewModels if necessary
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:FallingGameController.StartGame">
            <summary>
            Begin playing the game.  This should be invoked from the Game Class->OnLoaded event.
            </summary>
        </member>
        <member name="M:FallingGameController.AddBoxes">
            <summary>
            Simply a coroutine to add a cube to the collection and bind the cubes events
            </summary>
            <returns>IEnumerator for Coroutine</returns>
        </member>
        <member name="P:FallingGameController.BoxController">
            <summary>
            Reference to the box controller to create boxes
            </summary>
        </member>
        <member name="P:FallingGameController.CurrentGame">
            <summary>
            Manually access the Current Game ViewModel
            </summary>
        </member>
        <member name="P:FallingGameController.PlayerController">
            <summary>
            Reference to the player controller so we can create a player
            </summary>
        </member>
        <member name="M:TwoWayGameGameType.Setup">
            <summary>
            Register anything with the dependency container via
            Container.Register or Container.RegisterInstance
            </summary>
        </member>
        <member name="M:TwoWayGameGameType.Load(UpdateProgressDelegate)">
            <summary>
            A coroutine to load the game.
            This is a good place to instantiate any root view that arn't in the scene
            as well as perform a login, network connection or anything that may require
            the game to load slowly.
            </summary>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="M:TwoWayGameGameType.Reload">
            <summary>
            Any logic needed to reload this game.  
            Usually only needed for physics resets
            </summary>
        </member>
        <member name="M:TwoWayGameGameType.OnLoaded">
            <summary>
            After this game has been loaded.  This is a good place to let any controller 
            know that the game has started.
            </summary>
        </member>
        <member name="T:BindableProperty">
            <summary>
            A wrapper for any class property so it can easily be bound to.
            </summary>
        </member>
        <member name="P:BindableProperty.Value">
            <summary>
            Get the value of the property
            </summary>
        </member>
        <member name="T:Binding">
            <summary>
            The base class for all bindings.
            </summary>
        </member>
        <member name="T:IBinding">
            <summary>
            Interface for all bindings
            </summary>
        </member>
        <member name="M:Binding.#ctor(ViewBase,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="sourceView">The View that will own this binding.</param>
            <param name="modelMemberName">The member of the ViewModel.</param>
        </member>
        <member name="M:Binding.Bind">
            <summary>
            Set-up the binding. This should almost always be implemented in a deriving class.
            </summary>
        </member>
        <member name="M:Binding.Unbind">
            <summary>
            Unbind this binding
            </summary>
        </member>
        <member name="P:Binding.CanTwoWayBind">
            <summary>
            Does this instance type implement ITwoWayBinding?
            </summary>
        </member>
        <member name="P:Binding.GetTargetValueDelegate">
            <summary>
            A delegate for Getting the target value and is required for a two-way binding.
            </summary>
        </member>
        <member name="P:Binding.IsComponent">
            <summary>
            Was this loaded from a component in the Unity Inspector?
            </summary>
        </member>
        <member name="P:Binding.ModelMemberName">
            <summary>
            The source ViewModel member name that is being bound to.
            </summary>
        </member>
        <member name="P:Binding.ModelProperty">
            <summary>
            The Model Property that is being bound to. Will call the ModelPropertySelector if null.
            </summary>
        </member>
        <member name="P:Binding.ModelPropertySelector">
            <summary>
            A selector that will select the model property.
            This should be set manually if reflection shouldn't be used.
            </summary>
        </member>
        <member name="P:Binding.SetTargetValueDelegate">
            <summary>
            A delegate to set the value of the target member(s).
            </summary>
        </member>
        <member name="P:Binding.Source">
            <summary>
            The owner view that this Binding belongs to
            </summary>
        </member>
        <member name="P:Binding.SourceValue">
            <summary>
            The value of the ViewModel Member
            </summary>
        </member>
        <member name="P:Binding.TwoWay">
            <summary>
            Is this a two-way binding.
            </summary>
        </member>
        <member name="T:CollisionEventBinding">
            <summary>
            A component for binding to a collision.
            </summary>
        </member>
        <member name="T:ComponentCommandBinding">
            <summary>
            A component that will create a command binding and requires a component for the command to work.
            </summary>
        </member>
        <member name="T:ComponentBinding">
            <summary>
            A Unity3d Component that will provide a binding to a specified View
            </summary>
        </member>
        <member name="M:ComponentBinding.FilterBindableProperties(System.Collections.Generic.Dictionary{System.String,ModelPropertyBase})">
            <summary>
            Override this method to filter the list of properties that are displayed in the Binding Inspector
            </summary>
            <param name="modelProperties"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentBinding.GetBinding">
            <summary>
            The binding provider.  Create the binding that the component will add to the source view here.
            </summary>
            <returns>The binding that will be added to the source view.</returns>
        </member>
        <member name="P:ComponentBinding.Binding">
            <summary>
            The binding that has been created for this component.
            </summary>
        </member>
        <member name="P:ComponentCommandBinding.CommandBinding">
            <summary>
            Simply a wrapper of "Binding" property cast to ModelCommandBinding
            </summary>
        </member>
        <member name="M:CollisionEventBinding.GetBinding">
            <summary>
            The binding provider.  Create the binding that the component will add to the source view here.
            </summary>
            <returns>The binding that will be added to the source view.</returns>
        </member>
        <member name="T:CommandBinding">
            <summary>
            Base class for a command binding.  Use this class if a different type of command binding is needed.
            </summary>
        </member>
        <member name="T:EventBinding">
            <summary>
            The event binding component that will add an event binding to a source view.
            </summary>
        </member>
        <member name="M:ITwoWayBinding.BindReverse">
            <summary>
            Will be called every update frame
            </summary>
        </member>
        <member name="T:KeyBinding">
            <summary>
            A component that will process a key binding as well as provide a key binding instance to the source view.
            Note.  Even when adding this binding via code the component will still be added
            because a component is needed to process a keypress
            </summary>
        </member>
        <member name="M:KeyBinding.GetBinding">
            <summary>
            The binding provider.  Create the binding that the component will add to the source view here.
            </summary>
            <returns>The binding that will be added to the source view.</returns>
        </member>
        <member name="T:ModelCollisionEventBinding">
            <summary>
            A collision binding that will trigger a command when executed.
            Use chaining when possible to provide additional options for this binding.
            </summary>
        </member>
        <member name="T:ModelCommandBinding">
            <summary>
            A base class for binding to a ViewModel command.
            </summary>
        </member>
        <member name="M:ModelCollisionEventBinding.GetArgument">
            <summary>
            Overriden to supply the CommandArgumentSelector result value if its not equal to null
            </summary>
            <returns>The object that will be passed as the argument to the command.</returns>
        </member>
        <member name="M:ModelCollisionEventBinding.SetParameterSelector(System.Func{UnityEngine.GameObject,System.Object})">
            <summary>
            Set the parameter that will be passed to the command.
            </summary>
            <param name="commandArgSelector">A selector that will select the object to pass to the command with the collider as the first argument</param>
            <returns></returns>
        </member>
        <member name="M:ModelCollisionEventBinding.Subscribe(System.Action{UnityEngine.GameObject},System.Boolean)">
            <summary>
            Subscribe to this collision binding with a reference to the collider.
            </summary>
            <param name="action">The action to perform with the collider as the parameter.</param>
            <param name="before">Execute the action before the action executes. Defaults to false.</param>
            <returns>This so it can be further chained.</returns>
        </member>
        <member name="M:ModelCollisionEventBinding.When(System.Predicate{UnityEngine.GameObject})">
            <summary>
            A filter to determine when a collision should invoke the command this is bound to.
            </summary>
            <param name="predicate">Return true if the command should be invoked.  Use the GameObject parameter to filter colliders.</param>
            <returns>This so it can be further chained.</returns>
        </member>
        <member name="P:ModelCollisionEventBinding.CollisionEvent">
            <summary>
            The collision/trigger event that will invoke the command this is bound to.
            </summary>
        </member>
        <member name="T:ModelEventBinding">
            <summary>
            An event binding.  Basically a wrapper for a .NET event so events can be triggered by a string.
            They can easily be bound and is mainly for conveniance.
            </summary>
        </member>
        <member name="T:ModelKeyBinding">
            <summary>
            Binds a key to a ViewModel command.
            </summary>
        </member>
        <member name="M:ModelKeyBinding.RequireAlt">
            <summary>
            When invoked Alt must be pressed along with 'Key' for the command to be invoked
            </summary>
            <returns>This to respect chaining.</returns>
        </member>
        <member name="M:ModelKeyBinding.RequireControl">
            <summary>
            When invoked Control must be pressed along with 'Key' for the command to be invoked
            </summary>
            <returns>This to respect chaining.</returns>
        </member>
        <member name="M:ModelKeyBinding.RequireShift">
            <summary>
            When invoked Shift must be pressed along with 'Key' for the command to be invoked
            </summary>
            <returns>This to respect chaining.</returns>
        </member>
        <member name="T:ModelPropertyBinding">
            <summary>
            A class that contains a binding from a ViewModel to a Target
            </summary>
        </member>
        <member name="M:ModelPropertyBinding.BindReverse">
            <summary>
            If the value has changed apply the value to the property without reinvoking the SetTargetDelegate.
            It's important to not reinvoke the SetTargetDelegate because it will create a stack overflow. But only
            the SetTargetDelegate should be ignored because there may be other bindings to this property and when it changes
            they should definately know about it.
            </summary>
        </member>
        <member name="M:ModelPropertyBinding.Unbind">
            <summary>
            Unbind remove the property changed event handler and the sets the model property
            to null so it can be refreshed if a new model is set
            </summary>
        </member>
        <member name="M:ModelPropertyBinding.PropertyChanged(System.Object)">
            
             <summary>
             The property changed event handler.
             </summary>
             <param name="value"></param>
        </member>
        <member name="T:ModelViewModelCollectionBinding">
            <summary>
            Class for a view collection binding. Binds a ViewModel collection to a set of corresponding Views
            </summary>
        </member>
        <member name="T:MouseEventType">
            <summary>
            A Unity mouse event. The comments are from the unity documentation.
            </summary>
        </member>
        <member name="T:PropertyBinding">
            <summary>
            A component for a property binding.  A component property binding will use reflection to pull the member information
            so if performance is an issue I would recommend a code only binding.
            </summary>
        </member>
        <member name="T:ViewBindings">
            <summary>
            Binding extension method that make it easy to bind ViewModels to Views
            </summary>
        </member>
        <member name="M:ViewBindings.BindCollection``1(ViewModelObserver,System.Func{ModelCollection{``0}})">
            <summary>
            Bind to a ViewModel collection.
            </summary>
            <typeparam name="TCollectionItemType">The type that the collection contains.</typeparam>
            <param name="t">This</param>
            <param name="collectionSelector">Select a model collection.</param>
            <returns>The binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindCollision(ViewBase,System.Func{ICommand},CollisionEventType)">
            <summary>
            Bind a Unity Collision event to a ViewModel command.
            </summary>
            <param name="t">The view that owns the binding</param>
            <param name="commandSelector">A function that will select the command from a ViewModel.</param>
            <param name="eventType">The collision event to bind to.</param>
            <returns>The collision binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindEvent(ViewBase,System.Func{ICommand},System.String)">
            <summary>
            Bind a string named event.
            </summary>
            <param name="t">The view that owns the binding</param>
            <param name="commandSelector"></param>
            <param name="eventName"></param>
            <returns>The event binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindInputButton(ViewModelObserver,System.Func{ICommand},System.String,InputButtonEventType)">
            <summary>
            Bind a input button to a ViewModel Command
            </summary>
            <param name="t">The view that owns the binding</param>
            <param name="commandSelector">The command to bind the input to</param>
            <param name="buttonName">The name of the input button to bind to.</param>
            <returns>The binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindKey(ViewModelObserver,System.Func{ICommand},UnityEngine.KeyCode,System.Object)">
            <summary>
            Bind a key to a ViewModel Command
            </summary>
            <param name="t">The view that owns the binding</param>
            <param name="commandSelector"></param>
            <param name="key"></param>
            <param name="throttle"></param>
            <returns>The binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindMouseEvent(ViewBase,System.Func{ICommand},MouseEventType)">
            <summary>
            Binds a mouse event to a ViewModel Command.
            </summary>
            <param name="view">The view that will own the Binding.</param>
            <param name="commandSelector">ICommand selector</param>
            <param name="eventType">The mouse event to bind to.</param>
            <returns>The binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindProperty``1(ViewModelObserver,System.Func{P{``0}},System.Action{``0})">
            <summary>
            The binding class that allows chaining extra options.
            </summary>
            <typeparam name="TBindingType">The type of the model property to bind to.</typeparam>
            <param name="t">The view that owns the binding</param>
            <param name="sourceProperty">The ViewModel property to bind to. Ex. ()=>Model.MyViewModelProperty</param>
            <param name="targetSetter">Should set the value of the target.</param>
            <returns>The binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindProperty``1(ViewModelObserver,System.Func{P{``0}},System.Action{``0},System.Func{``0})">
            <summary>
            A Two-Way binding to a ViewModel Property.
            </summary>
            <typeparam name="TBindingType"></typeparam>
            <param name="t">The view that owns the binding</param>
            <param name="sourceProperty">The ViewModel property to bind to. Ex. ()=>Model.MyViewModelProperty</param>
            <param name="targetSetter">Should set the value of the target.</param>
            <param name="twoWayGetter">Should return the value of the target.</param>
            <returns>The binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindToViewCollection``2(ViewBase,System.Func{ModelCollection{``1}},System.Collections.Generic.ICollection{``0})">
            <summary>
            Bind a ViewModel Collection to a View Collection.
            </summary>
            <typeparam name="TView">The view that owns the binding</typeparam>
            <typeparam name="TViewModelType"></typeparam>
            <param name="sourceViewModelCollection"></param>
            <param name="viewCollection">The view collection is a list of ICollection that can be used to keep track of the Views created from the ViewModel Collection.</param>
            <returns>The collection binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindToView``1(ViewBase,System.Func{P{``0}},System.Action{ViewBase},System.Func{ViewBase})">
            <summary>
            The binding class that allows chaining extra options.
            </summary>
            <typeparam name="TBindingType">The type of the model property to bind to.</typeparam>
            <param name="t">The view that owns the binding</param>
            <param name="sourceViewModelSelector">Selector for the ViewModel Property</param>
            <param name="setLocal">Set a local variable on your view to store the bound view.</param>
            <param name="getLocal">Get the local variable on your view used in this binding.</param>
            <returns>The binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.BindToViewCollection``1(ViewBase,System.Func{ModelCollection{``0}})">
            <summary>
            Bind a ViewModel Collection
            </summary>
            <typeparam name="TCollectionType"></typeparam>
            <param name="t">The view that owns the binding</param>
            <param name="viewModelCollection">The view collection is a list of ICollection that can be used to keep track of the Views created from the ViewModel Collection.</param>
            <returns>The Collection Binding class that allows chaining extra options.</returns>
        </member>
        <member name="M:ViewBindings.Subscribe``1(ViewModelObserver,P{``0},System.Action{``0})">
            <summary>
            Subscribes to the property and returns an action to unsubscribe.
            </summary>
            <typeparam name="TBindingType"></typeparam>
            <param name="modelProperty">The ViewModel Property to bind to.</param>
            <param name="onChange">When the property has changed.</param>
            <returns>An action to will unsubsribe.</returns>
        </member>
        <member name="M:ViewBindings.Subscribe(ViewModelObserver,System.Func{ICommand},System.Action)">
            <summary>
            Subscribes to a command execution.
            </summary>
            <param name="view">The view.</param>
            <param name="command">The command to subscribe to.</param>
            <param name="executed">When the command is executed then this will be executed.</param>
            <returns>An action that will unsubscribe</returns>
        </member>
        <member name="T:Command">
            <summary>
            A ViewModel command that can be executed.
            IEnumerator is always used so that any command can be a coroutine.
            </summary>
        </member>
        <member name="T:ICommand">
            <summary>
            The base command interface for implementing a command in a ViewModel
            </summary>
        </member>
        <member name="T:CommandWith`1">
            <summary>
            A command with an argument of type T.
            Not usually bound to directly but used to forward a command to a parent viewmodel
            </summary>
            <typeparam name="T">The argument parameter.</typeparam>
        </member>
        <member name="T:ICommand`1">
            <summary>
            A base command interface for implementing a command with a parameter in a ViewModel
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:YieldCommandWith`1">
            <summary>
            A coroutine command with a parameter.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:GameContainer">
            <summary>
            A ViewModel Container and a factory for Controllers and commands.
            </summary>
        </member>
        <member name="M:IGameContainer.Clear">
            <summary>
            Clears all type mappings and instances.
            </summary>
        </member>
        <member name="M:IGameContainer.Inject(System.Object)">
            <summary>
            Injects registered types/mappings into an object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:IGameContainer.Register``2">
            <summary>
            Register a type mapping
            </summary>
            <typeparam name="TSource">The base type.</typeparam>
            <typeparam name="TTarget">The concrete type</typeparam>
        </member>
        <member name="M:IGameContainer.RegisterInstance``1(``0,System.Boolean)">
            <summary>
            Register an instance of a type.
            </summary>
            <typeparam name="TBase"></typeparam>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:IGameContainer.RegisterInstance(System.Type,System.Object,System.Boolean)">
            <summary>
            Register an instance of a type.
            </summary>
            <param name="type"></param>
            <param name="default"></param>
            <returns></returns>
        </member>
        <member name="M:IGameContainer.Resolve``1">
            <summary>
             If an instance of T exist then it will return that instance otherwise it will create a new one based off mappings.
            </summary>
            <typeparam name="T">The type of instance to resolve</typeparam>
            <returns>The/An instance of 'instanceType'</returns>
        </member>
        <member name="M:IGameContainer.Resolve(System.Type,System.Boolean)">
            <summary>
            If an instance of instanceType exist then it will return that instance otherwise it will create a new one based off mappings.
            </summary>
            <param name="instanceType">The type of instance to resolve</param>
            <param name="requireInstance">Will cause an exception if an instance hasn't been registered</param>
            <returns>The/An instance of 'instanceType'</returns>
        </member>
        <member name="M:GameContainer.Clear">
            <summary>
            Clears all type-mappings and instances.
            </summary>
        </member>
        <member name="M:GameContainer.Inject(System.Object)">
            <summary>
            Injects registered types/mappings into an object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:GameContainer.Register``2">
            <summary>
            Register a type mapping
            </summary>
            <typeparam name="TSource">The base type.</typeparam>
            <typeparam name="TTarget">The concrete type</typeparam>
        </member>
        <member name="M:GameContainer.RegisterInstance``1(``0,System.Boolean)">
            <summary>
            Register an instance of a type.
            </summary>
            <typeparam name="TBase"></typeparam>
            <param name="instance"></param>
            <param name="injectNow"></param>
            <returns></returns>
        </member>
        <member name="M:GameContainer.RegisterInstance(System.Type,System.Object,System.Boolean)">
            <summary>
            Register an instance of a type.
            </summary>
            <param name="type">The type of the instance</param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:GameContainer.Resolve``1">
            <summary>
             If an instance of T exist then it will return that instance otherwise it will create a new one based off mappings.
            </summary>
            <typeparam name="T">The type of instance to resolve</typeparam>
            <returns>The/An instance of 'instanceType'</returns>
        </member>
        <member name="M:GameContainer.Resolve(System.Type,System.Boolean)">
            <summary>
            If an instance of instanceType exist then it will return that instance otherwise it will create a new one based off mappings.
            </summary>
            <param name="instanceType">The type of instance to resolve</param>
            <param name="requireInstance">If true will return null if an instance isn't registered.</param>
            <returns>The/An instance of 'instanceType'</returns>
        </member>
        <member name="T:GameManager">
            <summary>
            A singleton that manages our current game type and all the games types in the scene.
            This component will persist through every scene
            </summary>
        </member>
        <member name="F:GameManager._LoadingLevel">
            <summary>
            A level that displays a progress bar and message
            </summary>
        </member>
        <member name="F:GameManager._Start">
            <summary>
            Set this to the game that will load when the game starts
            </summary>
        </member>
        <member name="M:GameManager.SwitchGame``1(``0,System.Action{``0},UpdateProgressDelegate)">
            <summary>
            This switches the game from one to the other invoking a sequence of actions
            SwitchGame
                - Invoke the current controllers Unload() method.
                - Set the CurrentController Property to the new game
                - New Controller Load() method is invoked via StartCoroutine
                - New Controller OnLoading() method is invoked
                - After the Load() Coroutine method is complete it will invoke the ActiveGame Game's OnLoaded() method
            </summary>
            <typeparam name="TGame">The game type</typeparam>
            <param name="progress"></param>
            <param name="setup"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:GameManager.SwitchGameAndLevel``1(SwitchLevelSettings{``0})">
            <summary>
            Loads the other levels asynchronously and then switches the
            game assuming that it will exist in the scene after loading is finished.
            </summary>
            <typeparam name="T">The type of game</typeparam>
            <returns></returns>
        </member>
        <member name="M:GameManager.SwitchGameAndLevel``1(System.Action{``0},System.String[])">
            <summary>
            Loads the other levels asynchronously and then switches the
            game assuming that it will exist in the scene after loading is finished.
            </summary>
            <typeparam name="T">The type of the Game to switch to</typeparam>
            <param name="setup">Setup the Game?</param>
            <param name="levels">Load these levels additively?</param>
            <returns></returns>
        </member>
        <member name="M:GameManager.AddGame(GameType)">
            <summary>
            Adds a controler to the list of registered controllers.
            You shouldn't have to use this method directly.  It is used by a game to register itself.
            </summary>
            <param name="gameType">The game being added.</param>
        </member>
        <member name="M:GameManager.RemoveGame(GameType)">
            <summary>
            Removes the game type from this manager.  This will only happen if a Game is destroyed
            </summary>
            <param name="gameType"></param>
        </member>
        <member name="P:GameManager.ActiveGameType">
            <summary>
            The current running game
            </summary>
        </member>
        <member name="P:GameManager.Instance">
            <summary>
            The current instance of GameManager
            </summary>
        </member>
        <member name="P:GameManager.LoadingViewModel">
            <summary>
            The view model that is used for loading a scene.  Bind to this to be notified of progress changes
            </summary>
            <value>The loading view model.</value>
        </member>
        <member name="P:GameManager.Games">
            <summary>
            A list of all the game in the scene.
            Each game registers itself with this manager and is added to this list.
            </summary>
        </member>
        <member name="T:InjectAttribute">
            <summary>
            Used by the injection container to determine if a property or field should be injected.
            </summary>
        </member>
        <member name="T:UFrame">
            <summary>
            The uFrame static factory class for overriding/customizing core uFrame functionality if needed
            </summary>
        </member>
        <member name="T:ModelCollection`1">
            <summary>
            An observable collection to use in viewmodels.
            </summary>
        </member>
        <member name="T:P`1">
            <summary>
            A typed ViewModel Property Class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ModelPropertyBase">
            <summary>
            A base class for model properties.
            </summary>
        </member>
        <member name="M:ModelPropertyBase.QuietlySetValue(System.Object)">
            <summary>
            Sets the value without invoking any OnPropertyChanged events.
            This is useful for two-way bindings
            </summary>
            <param name="value"></param>
        </member>
        <member name="E:ModelPropertyBase.PropertyChanged">
            <summary>
            When the value has changed
            </summary>
        </member>
        <member name="P:ModelPropertyBase.ObjectValue">
            <summary>
            The value of this model property
            </summary>
        </member>
        <member name="P:ModelPropertyBase.ValueType">
            <summary>
            The value type of this property
            </summary>
        </member>
        <member name="M:P`1.Bind(System.Action{`0},System.Boolean)">
            <summary>
            Bind the specified target to this property.
            </summary>
            <param name="target">Target.</param>
            <typeparam name="TBindingType">The 1st type parameter.</typeparam>
        </member>
        <member name="M:P`1.Deserialize(JSONNode)">
            <summary>
            Deserialize the specified node into `Value`.
            </summary>
            <param name="node">Node.</param>
        </member>
        <member name="M:P`1.Serialize">
            <summary>
            Serializes this object
            </summary>
        </member>
        <member name="P:P`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:P`1.ValueType">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value.</value>
        </member>
        <member name="P:IView.ViewModelObject">
            <summary>
            Gets the view model object.
            </summary>
            <value>The view model object.</value>
        </member>
        <member name="P:IView.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the model.</value>
        </member>
        <member name="P:IView.ViewName">
            <summary>
            The name of the prefab that created this view
            </summary>
        </member>
        <member name="F:ViewModelRegistryType.ResolveInstance">
            <summary>
            Will use the resolve method of the dependency container. If an instance isn't registered it will throw an exception.
            </summary>
        </member>
        <member name="F:ViewModelRegistryType.Controller">
            <summary>
            On the views "Awake" method a Controller method will be invoked to assign the view model
            </summary>
        </member>
        <member name="F:ViewModelRegistryType.ResolvePerObject">
            <summary>
            Will use the resolve method creating a new instance of the dependency container but not throw an exception.
            </summary>
        </member>
        <member name="T:ViewResolver">
            <summary>
            The View Managers responsibility is to provide prefabes based off of a view model
            This implementation finds a prefab based off of the ViewModel's type name removing "View" from it.
            </summary>
        </member>
        <member name="M:ViewResolver.FindView(ViewModel)">
            <summary>
            Provides a prefab
            </summary>
            <param name="model">The model for the view prefab we are looking for</param>
            <returns></returns>
        </member>
        <member name="M:ViewResolver.FindView(System.String)">
            <summary>
            Provides a prefab based off a viewname
            </summary>
            <param name="viewName">The name of the view prefab we are looking for</param>
            <returns></returns>
        </member>
        <member name="T:LevelLoaderController">
            <summary>
            A [u]Frame built-in controller to manage loading a level via GameManager
            Add this in a level-loading scene along with LevelLoadViewModel and a LevelLoaderView.
            </summary>
        </member>
        <member name="P:LevelLoaderController.Settings">
            <summary>
            The settings at which the level will be loaded
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:LevelLoadProgress">
            <summary>
            A struct for passing a message and a progress indicator
            </summary>
        </member>
        <member name="M:LevelLoadProgress.#ctor(System.String,System.Single)">
            <summary>
            Level load progress
            </summary>
            <param name="message">What is happening?</param>
            <param name="progress">How complete are you. Range 0f - 1.0f</param>
        </member>
        <member name="P:LevelLoadProgress.Message">
            <summary>
            Simply a message saying what is happening
            </summary>
        </member>
        <member name="P:LevelLoadProgress.Progress">
            <summary>
            Progress should be a normalized value ranging from 0f - 1.0f
            </summary>
        </member>
        <member name="T:LevelLoadViewModel">
            <summary>
            The view model that is used when a level/scene is loading.
            </summary>
        </member>
    </members>
</doc>
